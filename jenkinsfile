pipeline {
    agent any
    environment {
        scannerHome = tool 'sonar'
    }
    tools {
        maven 'jenkinsmaven'
        // jdk 'Java17'
    }

    stages {
        stage('Demount'){
            steps{
                sh 'docker stop proyectofinal || true &&  docker rm proyectofinal || true'
       
            }
        }
        stage('Build') {
            steps {
                echo 'Construyendo la aplicacion'
                sh 'mvn clean package'
            }
        }
        stage('Test') {
            steps {
            	echo 'Ejecutando los tests '
            	sh 'mvn test'
				echo 'Finalizado los tests '
            }
        }
        //   stage('SonarScan'){
        //       steps{
        //       withSonarQubeEnv(installationName: 'sonar'){
        //          sh 'cd /var/jenkins_home/workspace/proyectoFinalDevOps'
        //          sh "mvn sonar:sonar \
        //             -Dsonar.projectKey=devopsfinal \
        //             -Dsonar.host.url=http:192.168.80.1:9000 \
        //             -Dsonar.login=9bb021358ca659968331734656df04bf01e4dce7"
        //      }
        //      }
        //  }
            stage("Sonar Scanner") {
                steps {
                    withSonarQubeEnv("sonar"){
                        script {
                            def sonarqubeScannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                            withCredentials([string(credentialsId:'sonar', variable: 'sonarLogin')]) {
                            sh "${sonarqubeScannerHome}/bin/sonar-scanner -e -Dsonar.host.url=http://192.168.80.1:9000 -Dsonar.login=${sonarLogin} -Dsonar.projectName=devops -Dsonar.projectVersion=${env.BUILD_NUMBER} -Dsonar.projectKey=devopsfinal -Dsonar.sources=src/main/java/com/kibernumacademy/devops -Dsonar.tests=src/test/java/com/kibernumacademy/devops -Dsonar.language=java -Dsonar.java.binaries=."
                        }
                        }
                    }
                }
            }          
            stage("Quality Gate") {
                steps {
                    timeout(time: 15, unit: 'MINUTES') { 
                        waitForQualityGate abortPipeline: true
                        script{
                            def qg = waitForQualityGate() 
                            if(qg.status != 'OK'){ 
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                            }
                        }
                    }
                }
            }





        stage('Build and Run docker'){
            steps{
                sh 'docker build -t proyectofinal .'
                sh 'docker run -d -p 9090:9090 --name proyectofinal proyectofinal'
                sh 'docker tag proyectofinal calegria27/proyectofinal:latest'
            }
        }
        stage('Docker push'){
            steps{
                echo 'Push a DockerHub'
                sh 'docker login'
                sh 'docker push calegria27/proyectofinal:latest'
            }
        }
    }
}
 